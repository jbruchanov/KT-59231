apply plugin: libs.plugins.jetbrains.multiplatform.get().pluginId
apply plugin: libs.plugins.jetbrains.cocoapods.get().pluginId
apply plugin: libs.plugins.android.library.get().pluginId
apply from: "$rootProject.projectDir/build-ktlint.gradle"

def suffix = project.name.with {
    switch (it) {
        case "test-common": return "test"
        case "shared": return "macroalarm.shared"
        default: return it.replace("lib-", "").split("-").collect { it.capitalize() }.join()
    }
}

kotlin {
    android {
        compilations.all {
            kotlinOptions {
                jvmTarget = libs.versions.jvmtarget.get()
            }
        }
    }

    jvm {
        jvmToolchain(libs.versions.jvmtarget.get().toInteger())
    }
    iosX64()
    iosArm64()
    iosSimulatorArm64()

    cocoapods {
        version = "1.0.0"
        summary = "Some description for the Shared Module"
        homepage = "Link to the Shared Module homepage"
        ios.deploymentTarget = "14.1"
        podfile = project.file("../appIos/Podfile")
        framework {
            if(project.name == "shared") {
                baseName = "MacroAlarmShared"
            } else {
                baseName = "Jibru${suffix.capitalize()}"
            }
            binaryOption("bundleId", "com.jibru.$suffix")
            binaryOption("bundleVersion", "2")
            isStatic = true
        }
        extraSpecAttributes["resources"] = "['src/commonMain/resources/**', 'src/iosMain/resources/**']"
    }

    sourceSets {
        commonMain {
            dependencies {
                if (project.name != "lib-core") {
                    //implementation(pmodules.core())
                }
                implementation(libs.kotlinx.coroutines.core)
                implementation(libs.kmp.buffer)
            }
        }

        commonTest {
            dependencies {
                implementation(kotlin("test"))
            }
        }

        androidMain
        androidUnitTest {
            //makes AS asking to run unit test on Jvm or android
            //dependsOn(jvmTest)
            dependencies {
                implementation(pmodules.testcommon())
                implementation(libs.bundles.unittests.jvm)
                implementation(libs.bundles.unittests.android)
            }
        }

        iosX64Main
        iosArm64Main
        iosSimulatorArm64Main

        iosMain {
            dependsOn(commonMain)
            iosX64Main.dependsOn(delegate)
            iosArm64Main.dependsOn(delegate)
            iosSimulatorArm64Main.dependsOn(delegate)
        }

        iosX64Test
        iosArm64Test
        iosSimulatorArm64Test
        iosTest {
            dependsOn(commonTest)
            iosX64Test.dependsOn(delegate)
            iosArm64Test.dependsOn(delegate)
            iosSimulatorArm64Test.dependsOn(delegate)
        }

        jvmTest {
            dependencies {
                implementation(pmodules.testcommon())
                implementation(libs.bundles.unittests.jvm)
            }
        }

        androidUnitTest {
            dependencies {
                implementation(pmodules.testcommon())
            }
        }
    }
}

android {
    namespace = "com.jibru.$suffix"
    compileSdk = libs.versions.android.sdk.compile.get().toInteger()
    defaultConfig {
        minSdk = libs.versions.android.sdk.min.get().toInteger()
        targetSdk = libs.versions.android.sdk.target.get().toInteger()
    }

    sourceSets.main {
        manifest.srcFile("src/androidMain/AndroidManifest.xml")
        res.srcDirs("src/androidMain/res")
        resources.srcDirs("src/commonMain/resources")
    }

    compileOptions {
        sourceCompatibility = libs.versions.jvmtarget.get()
        targetCompatibility = libs.versions.jvmtarget.get()
    }
    kotlin {
        jvmToolchain(libs.versions.jvmtarget.get().toInteger())
    }

    testOptions {
        unitTests.all {
            useJUnitPlatform()
            //necessary for test.ThreeTenTestInit
            //https://junit.org/junit5/docs/current/user-guide/#extensions-registration-automatic
            systemProperty 'junit.jupiter.extensions.autodetection.enabled', 'true'
        }
    }
}

tasks.jvmTest {
    useJUnitPlatform()
    testLogging {
        showExceptions = true
        showStandardStreams = true
    }
}
